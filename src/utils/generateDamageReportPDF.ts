import jsPDF from "jspdf";
import html2canvas from "html2canvas";

type DamageClass = "crack" | "insect damage" | "physical damage";

export async function generateDamageReportPDF({
  imageUrl,
  damageType,
  estimatedCost,
  itemsNeeded,
  preventionTips,
  referenceNo,
  date,
  breakdown,
  areaByType,
  materialCost,
  labourCost,
}: {
  imageUrl: string;
  damageType: string;
  estimatedCost: number;
  itemsNeeded: string[];
  preventionTips: string[];
  referenceNo: string;
  date: string;
  breakdown: Record<DamageClass, number>;
  areaByType: Record<DamageClass, number>;
  materialCost: number;
  labourCost: number;
}) {
  // Create a hidden container
  const container = document.createElement("div");
  container.style.width = "600px";
  container.style.padding = "24px";
  container.style.background = "#fff";
  container.style.color = "#222";
  container.style.fontFamily = "Arial, sans-serif";
  container.style.position = "fixed";
  container.style.left = "-9999px";
  container.style.top = "0";
  container.style.zIndex = "9999";

  // Build the HTML content
  container.innerHTML = `
    <h2 style="text-align:center;">Wooden Furniture Damage Report</h2>
    <div style="display:flex;justify-content:space-between;margin-bottom:16px;">
      <span>Date: ${date}</span>
      <span>Ref No: ${referenceNo}</span>
    </div>
    <div style="text-align:center;margin-bottom:16px;">
      <img src="${imageUrl}" alt="Uploaded" style="max-width:100%;max-height:300px;" />
    </div>
    <div><strong>Identified Damage Type:</strong> ${damageType}</div>
    <div><strong>Material Cost:</strong> LKR ${materialCost.toFixed(2)}</div>
    <div><strong>Labour Cost:</strong> LKR ${labourCost.toFixed(2)}</div>
    <div><strong>Total Estimated Repair Cost:</strong> LKR ${estimatedCost.toFixed(
      2
    )}</div>
    <div>
      <strong>Breakdown:</strong>
      <ul>
        ${Object.entries(breakdown)
          .filter(([type, count]) => count > 0)
          .map(
            ([type, count]) =>
              `<li>${type.replace(/^\w/, (c) =>
                c.toUpperCase()
              )}: ${count} spot(s), Area: ${
                areaByType[type as DamageClass]?.toFixed(2) ?? "0.00"
              } cmÂ²</li>`
          )
          .join("")}
      </ul>
    </div>
    <div>
      <strong>Possible Items Needed:</strong>
      <ul>
        ${itemsNeeded.map((item) => `<li>${item}</li>`).join("")}
      </ul>
    </div>
    <div>
      <strong>Prevention Tips:</strong>
      <ul>
        ${preventionTips.map((tip) => `<li>${tip}</li>`).join("")}
      </ul>
    </div>
    <div style="margin-top:24px;font-size:12px;text-align:center;">
      Generated by FurniScan AI | www.furniscan.com
    </div>
  `;

  document.body.appendChild(container);

  // Wait for image to load before capturing
  const img = container.querySelector("img");
  if (img && !img.complete) {
    await new Promise((resolve) => {
      img.onload = resolve;
      img.onerror = resolve;
    });
  }

  const canvas = await html2canvas(container as HTMLElement);
  const imgData = canvas.toDataURL("image/png");
  const pdf = new jsPDF("p", "mm", "a4");
  const pdfWidth = pdf.internal.pageSize.getWidth();
  const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
  pdf.addImage(imgData, "PNG", 0, 0, pdfWidth, pdfHeight);
  pdf.save(`FurniScan_Report_${referenceNo}.pdf`);

  document.body.removeChild(container);
}
